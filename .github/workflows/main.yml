name: Main
on: workflow_dispatch
jobs:
  windows:
    strategy:
      matrix:
        os: [windows-latest]
        architecture: ["x64", "x86"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
          architecture: ${{ matrix.architecture }}

      - name: Install Poetry
        run: |
          pip install poetry
      - name: Build
        run: |
          cd poulstar
          poetry build
      - name: Archive output content
        uses: thedoctor0/zip-release@master
        with:
          filename: output.zip
          directory: poulstar/dist/
          
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.architecture }}
          path: poulstar/dist/*.zip

  ubuntu:
    strategy:
      matrix:
        os: [ubuntu-latest]
        architecture: ["x64"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
          architecture: ${{ matrix.architecture }}

      - name: Install poetry
        run: |
          pip install poetry
      - name: Build
        run: |
          cd poulstar
          poetry build
          
      - name: Archive output content
        uses: thedoctor0/zip-release@master
        with:
          filename: output.zip
          directory: poulstar/dist/
          
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.architecture }}
          path: poulstar/dist/*.zip

  mac:
    strategy:
      matrix:
        os: [macos-latest]
        architecture: ["x64"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
          architecture: ${{ matrix.architecture }}

      - name: Install Poetry
        run: |
          pip install poetry
      - name: Build
        run: |
          cd poulstar
          poetry build

      - name: Archive output content
        uses: thedoctor0/zip-release@master
        with:
          filename: output.zip
          directory: poulstar/dist/
          
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.architecture }}
          path: poulstar/dist/*.zip

  distribute-project:
    name: Distribute project to GitHub Releases
    runs-on: ubuntu-latest
    needs: [ubuntu, windows, mac]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
      
      - name: Install toml
        run: |
          pip install toml
      - name: Check pypi versions
        id: versioncheck
        run: python .github/workflows/version.py
      - uses: actions/download-artifact@v3

      - name: Create GitHub release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: "Version ${{ steps.versioncheck.outputs.version }}"
          
      - name: Upload ubuntu asset to GitHub release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ./ubuntu-latest-x64/output.zip
          asset_name: ubuntu.zip
          asset_content_type: application/zip
          
      - name: Upload Windows asset to GitHub release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ./windows-latest-x64/output.zip
          asset_name: windows.zip
          asset_content_type: application/zip

      - name: Upload Mac asset to GitHub release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ./macos-latest-x64/output.zip
          asset_name: macos.zip
          asset_content_type: application/zip
